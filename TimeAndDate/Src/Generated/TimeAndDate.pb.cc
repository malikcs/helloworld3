// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TimeAndDate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION


#ifndef DISABLE_INGENICO_PROTOBUF_PATCH
    #include <memory>
    #include "ingenico/dateAndTime/TimeAndDate.pb.h"
#else
   #include "TimeAndDate.pb.h"
#endif


#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ingenico {
namespace dateAndTime {

namespace {

// ####GenerateDescriptorDeclarations
const ::google::protobuf::Descriptor* GetDateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetDateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetDateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestRequest_reflection_ = NULL;
// ####ClassName

}  // namespace

// ####GenerateBuildDescriptors

void protobuf_AssignDesc_TimeAndDate_2eproto()
{
  protobuf_AddDesc_TimeAndDate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TimeAndDate.proto");
  GOOGLE_CHECK(file != NULL);
  GetDateRequest_descriptor_ = file->message_type(0);
  static const int GetDateRequest_offsets_[1] = {
  };
  GetDateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDateRequest_descriptor_,
      GetDateRequest::default_instance_,
      GetDateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDateRequest));
  GetDateResponse_descriptor_ = file->message_type(1);
  static const int GetDateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponse, resultofgetdate_),
  };
  GetDateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetDateResponse_descriptor_,
      GetDateResponse::default_instance_,
      GetDateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetDateResponse));
  SetDateResponse_descriptor_ = file->message_type(2);
  static const int SetDateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateResponse, datechanged_),
  };
  SetDateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDateResponse_descriptor_,
      SetDateResponse::default_instance_,
      SetDateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDateResponse));
  SetDateRequest_descriptor_ = file->message_type(3);
  static const int SetDateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateRequest, datestring_),
  };
  SetDateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDateRequest_descriptor_,
      SetDateRequest::default_instance_,
      SetDateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDateRequest));
  SetTimeResponse_descriptor_ = file->message_type(4);
  static const int SetTimeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeResponse, timechanged_),
  };
  SetTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTimeResponse_descriptor_,
      SetTimeResponse::default_instance_,
      SetTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTimeResponse));
  SetTimeRequest_descriptor_ = file->message_type(5);
  static const int SetTimeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeRequest, timestring_),
  };
  SetTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTimeRequest_descriptor_,
      SetTimeRequest::default_instance_,
      SetTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTimeRequest));
  TestResponse_descriptor_ = file->message_type(6);
  static const int TestResponse_offsets_[1] = {
  };
  TestResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestResponse_descriptor_,
      TestResponse::default_instance_,
      TestResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestResponse));
  TestRequest_descriptor_ = file->message_type(7);
  static const int TestRequest_offsets_[1] = {
  };
  TestRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestRequest_descriptor_,
      TestRequest::default_instance_,
      TestRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce()
{
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TimeAndDate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&)
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDateRequest_descriptor_, &GetDateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetDateResponse_descriptor_, &GetDateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDateResponse_descriptor_, &SetDateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDateRequest_descriptor_, &SetDateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTimeResponse_descriptor_, &SetTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTimeRequest_descriptor_, &SetTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestResponse_descriptor_, &TestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestRequest_descriptor_, &TestRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TimeAndDate_2eproto()
{
  delete GetDateRequest::default_instance_;
  delete GetDateRequest_reflection_;
  delete GetDateResponse::default_instance_;
  delete GetDateResponse_reflection_;
  delete SetDateResponse::default_instance_;
  delete SetDateResponse_reflection_;
  delete SetDateRequest::default_instance_;
  delete SetDateRequest_reflection_;
  delete SetTimeResponse::default_instance_;
  delete SetTimeResponse_reflection_;
  delete SetTimeRequest::default_instance_;
  delete SetTimeRequest_reflection_;
  delete TestResponse::default_instance_;
  delete TestResponse_reflection_;
  delete TestRequest::default_instance_;
  delete TestRequest_reflection_;
}

void protobuf_AddDesc_TimeAndDate_2eproto()
{
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TimeAndDate.proto\022\024ingenico.dateAndTim"
    "e\"\020\n\016GetDateRequest\"*\n\017GetDateResponse\022\027"
    "\n\017resultofgetdate\030\001 \002(\t\"&\n\017SetDateRespon"
    "se\022\023\n\013datechanged\030\001 \002(\t\"$\n\016SetDateReques"
    "t\022\022\n\ndatestring\030\001 \002(\t\"&\n\017SetTimeResponse"
    "\022\023\n\013timechanged\030\001 \002(\t\"$\n\016SetTimeRequest\022"
    "\022\n\ntimestring\030\001 \002(\t\"\016\n\014TestResponse\"\r\n\013T"
    "estRequest2\344\002\n\013TimeAndDate\022V\n\007setDate\022$."
    "ingenico.dateAndTime.SetDateRequest\032%.in"
    "genico.dateAndTime.SetDateResponse\022V\n\007ge"
    "tDate\022$.ingenico.dateAndTime.GetDateRequ"
    "est\032%.ingenico.dateAndTime.GetDateRespon"
    "se\022M\n\004test\022!.ingenico.dateAndTime.TestRe"
    "quest\032\".ingenico.dateAndTime.TestRespons"
    "e\022V\n\007setTime\022$.ingenico.dateAndTime.SetT"
    "imeRequest\032%.ingenico.dateAndTime.SetTim"
    "eResponse", 649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TimeAndDate.proto", &protobuf_RegisterTypes);
  GetDateRequest::default_instance_ = new GetDateRequest();
  GetDateResponse::default_instance_ = new GetDateResponse();
  SetDateResponse::default_instance_ = new SetDateResponse();
  SetDateRequest::default_instance_ = new SetDateRequest();
  SetTimeResponse::default_instance_ = new SetTimeResponse();
  SetTimeRequest::default_instance_ = new SetTimeRequest();
  TestResponse::default_instance_ = new TestResponse();
  TestRequest::default_instance_ = new TestRequest();
  GetDateRequest::default_instance_->InitAsDefaultInstance();
  GetDateResponse::default_instance_->InitAsDefaultInstance();
  SetDateResponse::default_instance_->InitAsDefaultInstance();
  SetDateRequest::default_instance_->InitAsDefaultInstance();
  SetTimeResponse::default_instance_->InitAsDefaultInstance();
  SetTimeRequest::default_instance_->InitAsDefaultInstance();
  TestResponse::default_instance_->InitAsDefaultInstance();
  TestRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TimeAndDate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TimeAndDate_2eproto
{
  StaticDescriptorInitializer_TimeAndDate_2eproto()
  {
    protobuf_AddDesc_TimeAndDate_2eproto();
  }
} static_descriptor_initializer_TimeAndDate_2eproto_;
// ####GenerateMethods
// ####GenerateClassMethods

// ===================================================================

GetDateRequest& GetDateRequest::operator=(const GetDateRequest& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& GetDateRequest::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* GetDateRequest::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long GetDateRequest::messageType = 0xf6d06039a6910c02LL;
unsigned long long GetDateRequest::getMessageType() const
{
  return messageType;
}
unsigned long long GetDateRequest::getMessageTypeStatic()
{
  return GetDateRequest::messageType;
}

GetDateRequest::GetDateRequest()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void GetDateRequest::InitAsDefaultInstance()
{
}

GetDateRequest::GetDateRequest(const GetDateRequest& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void GetDateRequest::SharedCtor()
{
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDateRequest::~GetDateRequest()
{
  SharedDtor();
}

void GetDateRequest::SharedDtor()
{
  if (this != default_instance_)
  {
  }
}

int GetDateRequest::GetCachedSize() const
{
  return _cached_size_;
}
void GetDateRequest::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDateRequest::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return GetDateRequest_descriptor_;
}

const GetDateRequest& GetDateRequest::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

GetDateRequest* GetDateRequest::default_instance_ = NULL;

GetDateRequest* GetDateRequest::newOne()
{
  return new GetDateRequest;
}

GetDateRequest* GetDateRequest::newOne(const GetDateRequest & from)
{
  return new GetDateRequest(from);
}

GetDateRequest::Instance GetDateRequest::instantiate()
{
  return GetDateRequest::Instance(new GetDateRequest);
}

GetDateRequest::Instance GetDateRequest::instantiate(const GetDateRequest & from)
{
  return GetDateRequest::Instance(new GetDateRequest(from));
}

GetDateRequest* GetDateRequest::New() const
{
  return new GetDateRequest;
}

void GetDateRequest::Clear()
{
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
    {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetDateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDateRequest::ByteSize() const
{
  int total_size = 0;

  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDateRequest::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const GetDateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDateRequest*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void GetDateRequest::MergeFrom(const GetDateRequest& from)
{
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDateRequest::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDateRequest::CopyFrom(const GetDateRequest& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDateRequest::IsInitialized() const
{

  return true;
}

void GetDateRequest::Swap(GetDateRequest* other)
{
  if (other != this)
  {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDateRequest::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDateRequest_descriptor_;
  metadata.reflection = GetDateRequest_reflection_;
  return metadata;
}


// ===================================================================

GetDateResponse& GetDateResponse::operator=(const GetDateResponse& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& GetDateResponse::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* GetDateResponse::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long GetDateResponse::messageType = 0x7e539124ebb18ef3LL;
unsigned long long GetDateResponse::getMessageType() const
{
  return messageType;
}
unsigned long long GetDateResponse::getMessageTypeStatic()
{
  return GetDateResponse::messageType;
}

const int GetDateResponse::kResultofgetdateFieldNumber = 1;
GetDateResponse::GetDateResponse()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void GetDateResponse::InitAsDefaultInstance()
{
}

GetDateResponse::GetDateResponse(const GetDateResponse& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void GetDateResponse::SharedCtor()
{
  _cached_size_ = 0;
  resultofgetdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetDateResponse::~GetDateResponse()
{
  SharedDtor();
}

void GetDateResponse::SharedDtor()
{
  if (resultofgetdate_ != &::google::protobuf::internal::kEmptyString)
  {
    delete resultofgetdate_;
  }
  if (this != default_instance_)
  {
  }
}

int GetDateResponse::GetCachedSize() const
{
  return _cached_size_;
}
void GetDateResponse::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDateResponse::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return GetDateResponse_descriptor_;
}

const GetDateResponse& GetDateResponse::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

GetDateResponse* GetDateResponse::default_instance_ = NULL;

GetDateResponse* GetDateResponse::newOne()
{
  return new GetDateResponse;
}

GetDateResponse* GetDateResponse::newOne(const GetDateResponse & from)
{
  return new GetDateResponse(from);
}

GetDateResponse::Instance GetDateResponse::instantiate()
{
  return GetDateResponse::Instance(new GetDateResponse);
}

GetDateResponse::Instance GetDateResponse::instantiate(const GetDateResponse & from)
{
  return GetDateResponse::Instance(new GetDateResponse(from));
}

GetDateResponse* GetDateResponse::New() const
{
  return new GetDateResponse;
}

void GetDateResponse::Clear()
{
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (has_resultofgetdate())
    {
      if (resultofgetdate_ != &::google::protobuf::internal::kEmptyString)
      {
        resultofgetdate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetDateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
    {
      // required string resultofgetdate = 1;
      case 1:
      {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
        {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resultofgetdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resultofgetdate().data(), this->resultofgetdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        }
        else
        {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default:
      {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
        {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetDateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  // required string resultofgetdate = 1;
  if (has_resultofgetdate())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resultofgetdate().data(), this->resultofgetdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resultofgetdate(), output);
  }

  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetDateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  // required string resultofgetdate = 1;
  if (has_resultofgetdate())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resultofgetdate().data(), this->resultofgetdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resultofgetdate(), target);
  }

  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetDateResponse::ByteSize() const
{
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    // required string resultofgetdate = 1;
    if (has_resultofgetdate())
    {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resultofgetdate());
    }

  }
  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDateResponse::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const GetDateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetDateResponse*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void GetDateResponse::MergeFrom(const GetDateResponse& from)
{
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (from.has_resultofgetdate())
    {
      set_resultofgetdate(from.resultofgetdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetDateResponse::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDateResponse::CopyFrom(const GetDateResponse& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDateResponse::IsInitialized() const
{
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetDateResponse::Swap(GetDateResponse* other)
{
  if (other != this)
  {
    std::swap(resultofgetdate_, other->resultofgetdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetDateResponse::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetDateResponse_descriptor_;
  metadata.reflection = GetDateResponse_reflection_;
  return metadata;
}


// ===================================================================

SetDateResponse& SetDateResponse::operator=(const SetDateResponse& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& SetDateResponse::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* SetDateResponse::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long SetDateResponse::messageType = 0xe5bef946a801a733LL;
unsigned long long SetDateResponse::getMessageType() const
{
  return messageType;
}
unsigned long long SetDateResponse::getMessageTypeStatic()
{
  return SetDateResponse::messageType;
}

const int SetDateResponse::kDatechangedFieldNumber = 1;
SetDateResponse::SetDateResponse()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void SetDateResponse::InitAsDefaultInstance()
{
}

SetDateResponse::SetDateResponse(const SetDateResponse& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void SetDateResponse::SharedCtor()
{
  _cached_size_ = 0;
  datechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDateResponse::~SetDateResponse()
{
  SharedDtor();
}

void SetDateResponse::SharedDtor()
{
  if (datechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    delete datechanged_;
  }
  if (this != default_instance_)
  {
  }
}

int SetDateResponse::GetCachedSize() const
{
  return _cached_size_;
}
void SetDateResponse::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDateResponse::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return SetDateResponse_descriptor_;
}

const SetDateResponse& SetDateResponse::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

SetDateResponse* SetDateResponse::default_instance_ = NULL;

SetDateResponse* SetDateResponse::newOne()
{
  return new SetDateResponse;
}

SetDateResponse* SetDateResponse::newOne(const SetDateResponse & from)
{
  return new SetDateResponse(from);
}

SetDateResponse::Instance SetDateResponse::instantiate()
{
  return SetDateResponse::Instance(new SetDateResponse);
}

SetDateResponse::Instance SetDateResponse::instantiate(const SetDateResponse & from)
{
  return SetDateResponse::Instance(new SetDateResponse(from));
}

SetDateResponse* SetDateResponse::New() const
{
  return new SetDateResponse;
}

void SetDateResponse::Clear()
{
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (has_datechanged())
    {
      if (datechanged_ != &::google::protobuf::internal::kEmptyString)
      {
        datechanged_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
    {
      // required string datechanged = 1;
      case 1:
      {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
        {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datechanged()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datechanged().data(), this->datechanged().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        }
        else
        {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default:
      {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
        {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  // required string datechanged = 1;
  if (has_datechanged())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datechanged().data(), this->datechanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datechanged(), output);
  }

  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  // required string datechanged = 1;
  if (has_datechanged())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datechanged().data(), this->datechanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datechanged(), target);
  }

  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDateResponse::ByteSize() const
{
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    // required string datechanged = 1;
    if (has_datechanged())
    {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datechanged());
    }

  }
  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDateResponse::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const SetDateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDateResponse*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void SetDateResponse::MergeFrom(const SetDateResponse& from)
{
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (from.has_datechanged())
    {
      set_datechanged(from.datechanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDateResponse::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDateResponse::CopyFrom(const SetDateResponse& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDateResponse::IsInitialized() const
{
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetDateResponse::Swap(SetDateResponse* other)
{
  if (other != this)
  {
    std::swap(datechanged_, other->datechanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDateResponse::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDateResponse_descriptor_;
  metadata.reflection = SetDateResponse_reflection_;
  return metadata;
}


// ===================================================================

SetDateRequest& SetDateRequest::operator=(const SetDateRequest& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& SetDateRequest::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* SetDateRequest::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long SetDateRequest::messageType = 0x110dcd9b60770a12LL;
unsigned long long SetDateRequest::getMessageType() const
{
  return messageType;
}
unsigned long long SetDateRequest::getMessageTypeStatic()
{
  return SetDateRequest::messageType;
}

const int SetDateRequest::kDatestringFieldNumber = 1;
SetDateRequest::SetDateRequest()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void SetDateRequest::InitAsDefaultInstance()
{
}

SetDateRequest::SetDateRequest(const SetDateRequest& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void SetDateRequest::SharedCtor()
{
  _cached_size_ = 0;
  datestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDateRequest::~SetDateRequest()
{
  SharedDtor();
}

void SetDateRequest::SharedDtor()
{
  if (datestring_ != &::google::protobuf::internal::kEmptyString)
  {
    delete datestring_;
  }
  if (this != default_instance_)
  {
  }
}

int SetDateRequest::GetCachedSize() const
{
  return _cached_size_;
}
void SetDateRequest::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDateRequest::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return SetDateRequest_descriptor_;
}

const SetDateRequest& SetDateRequest::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

SetDateRequest* SetDateRequest::default_instance_ = NULL;

SetDateRequest* SetDateRequest::newOne()
{
  return new SetDateRequest;
}

SetDateRequest* SetDateRequest::newOne(const SetDateRequest & from)
{
  return new SetDateRequest(from);
}

SetDateRequest::Instance SetDateRequest::instantiate()
{
  return SetDateRequest::Instance(new SetDateRequest);
}

SetDateRequest::Instance SetDateRequest::instantiate(const SetDateRequest & from)
{
  return SetDateRequest::Instance(new SetDateRequest(from));
}

SetDateRequest* SetDateRequest::New() const
{
  return new SetDateRequest;
}

void SetDateRequest::Clear()
{
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (has_datestring())
    {
      if (datestring_ != &::google::protobuf::internal::kEmptyString)
      {
        datestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
    {
      // required string datestring = 1;
      case 1:
      {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
        {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datestring().data(), this->datestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        }
        else
        {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default:
      {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
        {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetDateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  // required string datestring = 1;
  if (has_datestring())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestring().data(), this->datestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->datestring(), output);
  }

  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetDateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  // required string datestring = 1;
  if (has_datestring())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datestring().data(), this->datestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->datestring(), target);
  }

  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetDateRequest::ByteSize() const
{
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    // required string datestring = 1;
    if (has_datestring())
    {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datestring());
    }

  }
  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDateRequest::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const SetDateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDateRequest*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void SetDateRequest::MergeFrom(const SetDateRequest& from)
{
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (from.has_datestring())
    {
      set_datestring(from.datestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDateRequest::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDateRequest::CopyFrom(const SetDateRequest& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDateRequest::IsInitialized() const
{
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetDateRequest::Swap(SetDateRequest* other)
{
  if (other != this)
  {
    std::swap(datestring_, other->datestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDateRequest::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDateRequest_descriptor_;
  metadata.reflection = SetDateRequest_reflection_;
  return metadata;
}


// ===================================================================

SetTimeResponse& SetTimeResponse::operator=(const SetTimeResponse& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& SetTimeResponse::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* SetTimeResponse::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long SetTimeResponse::messageType = 0x756199336fe329f3LL;
unsigned long long SetTimeResponse::getMessageType() const
{
  return messageType;
}
unsigned long long SetTimeResponse::getMessageTypeStatic()
{
  return SetTimeResponse::messageType;
}

const int SetTimeResponse::kTimechangedFieldNumber = 1;
SetTimeResponse::SetTimeResponse()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void SetTimeResponse::InitAsDefaultInstance()
{
}

SetTimeResponse::SetTimeResponse(const SetTimeResponse& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void SetTimeResponse::SharedCtor()
{
  _cached_size_ = 0;
  timechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTimeResponse::~SetTimeResponse()
{
  SharedDtor();
}

void SetTimeResponse::SharedDtor()
{
  if (timechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    delete timechanged_;
  }
  if (this != default_instance_)
  {
  }
}

int SetTimeResponse::GetCachedSize() const
{
  return _cached_size_;
}
void SetTimeResponse::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTimeResponse::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return SetTimeResponse_descriptor_;
}

const SetTimeResponse& SetTimeResponse::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

SetTimeResponse* SetTimeResponse::default_instance_ = NULL;

SetTimeResponse* SetTimeResponse::newOne()
{
  return new SetTimeResponse;
}

SetTimeResponse* SetTimeResponse::newOne(const SetTimeResponse & from)
{
  return new SetTimeResponse(from);
}

SetTimeResponse::Instance SetTimeResponse::instantiate()
{
  return SetTimeResponse::Instance(new SetTimeResponse);
}

SetTimeResponse::Instance SetTimeResponse::instantiate(const SetTimeResponse & from)
{
  return SetTimeResponse::Instance(new SetTimeResponse(from));
}

SetTimeResponse* SetTimeResponse::New() const
{
  return new SetTimeResponse;
}

void SetTimeResponse::Clear()
{
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (has_timechanged())
    {
      if (timechanged_ != &::google::protobuf::internal::kEmptyString)
      {
        timechanged_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
    {
      // required string timechanged = 1;
      case 1:
      {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
        {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timechanged()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timechanged().data(), this->timechanged().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        }
        else
        {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default:
      {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
        {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  // required string timechanged = 1;
  if (has_timechanged())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timechanged().data(), this->timechanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timechanged(), output);
  }

  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  // required string timechanged = 1;
  if (has_timechanged())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timechanged().data(), this->timechanged().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timechanged(), target);
  }

  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTimeResponse::ByteSize() const
{
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    // required string timechanged = 1;
    if (has_timechanged())
    {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timechanged());
    }

  }
  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTimeResponse::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const SetTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTimeResponse*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void SetTimeResponse::MergeFrom(const SetTimeResponse& from)
{
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (from.has_timechanged())
    {
      set_timechanged(from.timechanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTimeResponse::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimeResponse::CopyFrom(const SetTimeResponse& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimeResponse::IsInitialized() const
{
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetTimeResponse::Swap(SetTimeResponse* other)
{
  if (other != this)
  {
    std::swap(timechanged_, other->timechanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTimeResponse::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTimeResponse_descriptor_;
  metadata.reflection = SetTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

SetTimeRequest& SetTimeRequest::operator=(const SetTimeRequest& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& SetTimeRequest::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* SetTimeRequest::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long SetTimeRequest::messageType = 0x42914bcfeddd2e12LL;
unsigned long long SetTimeRequest::getMessageType() const
{
  return messageType;
}
unsigned long long SetTimeRequest::getMessageTypeStatic()
{
  return SetTimeRequest::messageType;
}

const int SetTimeRequest::kTimestringFieldNumber = 1;
SetTimeRequest::SetTimeRequest()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void SetTimeRequest::InitAsDefaultInstance()
{
}

SetTimeRequest::SetTimeRequest(const SetTimeRequest& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void SetTimeRequest::SharedCtor()
{
  _cached_size_ = 0;
  timestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTimeRequest::~SetTimeRequest()
{
  SharedDtor();
}

void SetTimeRequest::SharedDtor()
{
  if (timestring_ != &::google::protobuf::internal::kEmptyString)
  {
    delete timestring_;
  }
  if (this != default_instance_)
  {
  }
}

int SetTimeRequest::GetCachedSize() const
{
  return _cached_size_;
}
void SetTimeRequest::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTimeRequest::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return SetTimeRequest_descriptor_;
}

const SetTimeRequest& SetTimeRequest::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

SetTimeRequest* SetTimeRequest::default_instance_ = NULL;

SetTimeRequest* SetTimeRequest::newOne()
{
  return new SetTimeRequest;
}

SetTimeRequest* SetTimeRequest::newOne(const SetTimeRequest & from)
{
  return new SetTimeRequest(from);
}

SetTimeRequest::Instance SetTimeRequest::instantiate()
{
  return SetTimeRequest::Instance(new SetTimeRequest);
}

SetTimeRequest::Instance SetTimeRequest::instantiate(const SetTimeRequest & from)
{
  return SetTimeRequest::Instance(new SetTimeRequest(from));
}

SetTimeRequest* SetTimeRequest::New() const
{
  return new SetTimeRequest;
}

void SetTimeRequest::Clear()
{
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (has_timestring())
    {
      if (timestring_ != &::google::protobuf::internal::kEmptyString)
      {
        timestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
    {
      // required string timestring = 1;
      case 1:
      {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED)
        {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestring().data(), this->timestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        }
        else
        {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default:
      {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
        {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  // required string timestring = 1;
  if (has_timestring())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestring().data(), this->timestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->timestring(), output);
  }

  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  // required string timestring = 1;
  if (has_timestring())
  {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestring().data(), this->timestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->timestring(), target);
  }

  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTimeRequest::ByteSize() const
{
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    // required string timestring = 1;
    if (has_timestring())
    {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestring());
    }

  }
  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTimeRequest::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const SetTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTimeRequest*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void SetTimeRequest::MergeFrom(const SetTimeRequest& from)
{
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32)))
  {
    if (from.has_timestring())
    {
      set_timestring(from.timestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTimeRequest::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTimeRequest::CopyFrom(const SetTimeRequest& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimeRequest::IsInitialized() const
{
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetTimeRequest::Swap(SetTimeRequest* other)
{
  if (other != this)
  {
    std::swap(timestring_, other->timestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTimeRequest::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTimeRequest_descriptor_;
  metadata.reflection = SetTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

TestResponse& TestResponse::operator=(const TestResponse& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& TestResponse::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* TestResponse::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long TestResponse::messageType = 0x63bb8cdeebffb573LL;
unsigned long long TestResponse::getMessageType() const
{
  return messageType;
}
unsigned long long TestResponse::getMessageTypeStatic()
{
  return TestResponse::messageType;
}

TestResponse::TestResponse()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void TestResponse::InitAsDefaultInstance()
{
}

TestResponse::TestResponse(const TestResponse& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void TestResponse::SharedCtor()
{
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestResponse::~TestResponse()
{
  SharedDtor();
}

void TestResponse::SharedDtor()
{
  if (this != default_instance_)
  {
  }
}

int TestResponse::GetCachedSize() const
{
  return _cached_size_;
}
void TestResponse::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestResponse::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return TestResponse_descriptor_;
}

const TestResponse& TestResponse::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

TestResponse* TestResponse::default_instance_ = NULL;

TestResponse* TestResponse::newOne()
{
  return new TestResponse;
}

TestResponse* TestResponse::newOne(const TestResponse & from)
{
  return new TestResponse(from);
}

TestResponse::Instance TestResponse::instantiate()
{
  return TestResponse::Instance(new TestResponse);
}

TestResponse::Instance TestResponse::instantiate(const TestResponse & from)
{
  return TestResponse::Instance(new TestResponse(from));
}

TestResponse* TestResponse::New() const
{
  return new TestResponse;
}

void TestResponse::Clear()
{
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
    {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestResponse::ByteSize() const
{
  int total_size = 0;

  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponse::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const TestResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestResponse*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void TestResponse::MergeFrom(const TestResponse& from)
{
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestResponse::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResponse::CopyFrom(const TestResponse& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const
{

  return true;
}

void TestResponse::Swap(TestResponse* other)
{
  if (other != this)
  {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestResponse::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestResponse_descriptor_;
  metadata.reflection = TestResponse_reflection_;
  return metadata;
}


// ===================================================================

TestRequest& TestRequest::operator=(const TestRequest& from)
{
  CopyFrom(from);
  return *this;
}
const ::google::protobuf::UnknownFieldSet& TestRequest::unknown_fields() const
{
  return _unknown_fields_;
}
::google::protobuf::UnknownFieldSet* TestRequest::mutable_unknown_fields()
{
  return &_unknown_fields_;
}
const unsigned long long TestRequest::messageType = 0x0822380628e92dd2LL;
unsigned long long TestRequest::getMessageType() const
{
  return messageType;
}
unsigned long long TestRequest::getMessageTypeStatic()
{
  return TestRequest::messageType;
}

TestRequest::TestRequest()
  : ::google::protobuf::Message()
{
  SharedCtor();
}

void TestRequest::InitAsDefaultInstance()
{
}

TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message()
{
  SharedCtor();
  MergeFrom(from);
}

void TestRequest::SharedCtor()
{
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestRequest::~TestRequest()
{
  SharedDtor();
}

void TestRequest::SharedDtor()
{
  if (this != default_instance_)
  {
  }
}

int TestRequest::GetCachedSize() const
{
  return _cached_size_;
}
void TestRequest::SetCachedSize(int size) const
{
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRequest::descriptor()
{
  protobuf_AssignDescriptorsOnce();
  return TestRequest_descriptor_;
}

const TestRequest& TestRequest::default_instance()
{
  if (default_instance_ == NULL) protobuf_AddDesc_TimeAndDate_2eproto();
  return *default_instance_;
}

TestRequest* TestRequest::default_instance_ = NULL;

TestRequest* TestRequest::newOne()
{
  return new TestRequest;
}

TestRequest* TestRequest::newOne(const TestRequest & from)
{
  return new TestRequest(from);
}

TestRequest::Instance TestRequest::instantiate()
{
  return TestRequest::Instance(new TestRequest);
}

TestRequest::Instance TestRequest::instantiate(const TestRequest & from)
{
  return TestRequest::Instance(new TestRequest(from));
}

TestRequest* TestRequest::New() const
{
  return new TestRequest;
}

void TestRequest::Clear()
{
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0)
  {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP)
    {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const
{
  if (!unknown_fields().empty())
  {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TestRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const
{
  if (!unknown_fields().empty())
  {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TestRequest::ByteSize() const
{
  int total_size = 0;

  if (!unknown_fields().empty())
  {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from)
{
  GOOGLE_CHECK_NE(&from, this);
  const TestRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestRequest*>(
      &from);
  if (source == NULL)
  {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  }
  else
  {
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from)
{
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from)
{
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const
{

  return true;
}

void TestRequest::Swap(TestRequest* other)
{
  if (other != this)
  {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestRequest::GetMetadata() const
{
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestRequest_descriptor_;
  metadata.reflection = TestRequest_reflection_;
  return metadata;
}

// ####GenerateDefinition
// ####GenerateInlineMethods
// GetDateRequest

// -------------------------------------------------------------------

// GetDateResponse

// required string resultofgetdate = 1;
bool GetDateResponse::has_resultofgetdate() const
{
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetDateResponse::set_has_resultofgetdate()
{
  _has_bits_[0] |= 0x00000001u;
}
void GetDateResponse::clear_has_resultofgetdate()
{
  _has_bits_[0] &= ~0x00000001u;
}
void GetDateResponse::clear_resultofgetdate()
{
  if (resultofgetdate_ != &::google::protobuf::internal::kEmptyString)
  {
    resultofgetdate_->clear();
  }
  clear_has_resultofgetdate();
}
const ::std::string& GetDateResponse::resultofgetdate() const
{
  return *resultofgetdate_;
}
void GetDateResponse::set_resultofgetdate(const ::std::string& value)
{
  set_has_resultofgetdate();
  if (resultofgetdate_ == &::google::protobuf::internal::kEmptyString)
  {
    resultofgetdate_ = new ::std::string;
  }
  resultofgetdate_->assign(value);
}
void GetDateResponse::set_resultofgetdate(const char* value)
{
  set_has_resultofgetdate();
  if (resultofgetdate_ == &::google::protobuf::internal::kEmptyString)
{
    resultofgetdate_ = new ::std::string;
  }
  resultofgetdate_->assign(value);
}
void GetDateResponse::set_resultofgetdate(const char* value, size_t size)
{
  set_has_resultofgetdate();
  if (resultofgetdate_ == &::google::protobuf::internal::kEmptyString)
  {
    resultofgetdate_ = new ::std::string;
  }
  resultofgetdate_->assign(reinterpret_cast<const char*>(value), size);
}
::std::string* GetDateResponse::mutable_resultofgetdate()
{
  set_has_resultofgetdate();
  if (resultofgetdate_ == &::google::protobuf::internal::kEmptyString)
  {
    resultofgetdate_ = new ::std::string;
  }
  return resultofgetdate_;
}
::std::string* GetDateResponse::release_resultofgetdate()
{
  clear_has_resultofgetdate();
  if (resultofgetdate_ == &::google::protobuf::internal::kEmptyString)
  {
    return NULL;
  }
  else
  {
    ::std::string* temp = resultofgetdate_;
    resultofgetdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
void GetDateResponse::set_allocated_resultofgetdate(::std::string* resultofgetdate)
{
  if (resultofgetdate_ != &::google::protobuf::internal::kEmptyString)
  {
    delete resultofgetdate_;
  }
  if (resultofgetdate)
  {
    set_has_resultofgetdate();
    resultofgetdate_ = resultofgetdate;
  }
  else
  {
    clear_has_resultofgetdate();
    resultofgetdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetDateResponse

// required string datechanged = 1;
bool SetDateResponse::has_datechanged() const
{
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetDateResponse::set_has_datechanged()
{
  _has_bits_[0] |= 0x00000001u;
}
void SetDateResponse::clear_has_datechanged()
{
  _has_bits_[0] &= ~0x00000001u;
}
void SetDateResponse::clear_datechanged()
{
  if (datechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    datechanged_->clear();
  }
  clear_has_datechanged();
}
const ::std::string& SetDateResponse::datechanged() const
{
  return *datechanged_;
}
void SetDateResponse::set_datechanged(const ::std::string& value)
{
  set_has_datechanged();
  if (datechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    datechanged_ = new ::std::string;
  }
  datechanged_->assign(value);
}
void SetDateResponse::set_datechanged(const char* value)
{
  set_has_datechanged();
  if (datechanged_ == &::google::protobuf::internal::kEmptyString)
{
    datechanged_ = new ::std::string;
  }
  datechanged_->assign(value);
}
void SetDateResponse::set_datechanged(const char* value, size_t size)
{
  set_has_datechanged();
  if (datechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    datechanged_ = new ::std::string;
  }
  datechanged_->assign(reinterpret_cast<const char*>(value), size);
}
::std::string* SetDateResponse::mutable_datechanged()
{
  set_has_datechanged();
  if (datechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    datechanged_ = new ::std::string;
  }
  return datechanged_;
}
::std::string* SetDateResponse::release_datechanged()
{
  clear_has_datechanged();
  if (datechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    return NULL;
  }
  else
  {
    ::std::string* temp = datechanged_;
    datechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
void SetDateResponse::set_allocated_datechanged(::std::string* datechanged)
{
  if (datechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    delete datechanged_;
  }
  if (datechanged)
  {
    set_has_datechanged();
    datechanged_ = datechanged;
  }
  else
  {
    clear_has_datechanged();
    datechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetDateRequest

// required string datestring = 1;
bool SetDateRequest::has_datestring() const
{
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetDateRequest::set_has_datestring()
{
  _has_bits_[0] |= 0x00000001u;
}
void SetDateRequest::clear_has_datestring()
{
  _has_bits_[0] &= ~0x00000001u;
}
void SetDateRequest::clear_datestring()
{
  if (datestring_ != &::google::protobuf::internal::kEmptyString)
  {
    datestring_->clear();
  }
  clear_has_datestring();
}
const ::std::string& SetDateRequest::datestring() const
{
  return *datestring_;
}
void SetDateRequest::set_datestring(const ::std::string& value)
{
  set_has_datestring();
  if (datestring_ == &::google::protobuf::internal::kEmptyString)
  {
    datestring_ = new ::std::string;
  }
  datestring_->assign(value);
}
void SetDateRequest::set_datestring(const char* value)
{
  set_has_datestring();
  if (datestring_ == &::google::protobuf::internal::kEmptyString)
{
    datestring_ = new ::std::string;
  }
  datestring_->assign(value);
}
void SetDateRequest::set_datestring(const char* value, size_t size)
{
  set_has_datestring();
  if (datestring_ == &::google::protobuf::internal::kEmptyString)
  {
    datestring_ = new ::std::string;
  }
  datestring_->assign(reinterpret_cast<const char*>(value), size);
}
::std::string* SetDateRequest::mutable_datestring()
{
  set_has_datestring();
  if (datestring_ == &::google::protobuf::internal::kEmptyString)
  {
    datestring_ = new ::std::string;
  }
  return datestring_;
}
::std::string* SetDateRequest::release_datestring()
{
  clear_has_datestring();
  if (datestring_ == &::google::protobuf::internal::kEmptyString)
  {
    return NULL;
  }
  else
  {
    ::std::string* temp = datestring_;
    datestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
void SetDateRequest::set_allocated_datestring(::std::string* datestring)
{
  if (datestring_ != &::google::protobuf::internal::kEmptyString)
  {
    delete datestring_;
  }
  if (datestring)
  {
    set_has_datestring();
    datestring_ = datestring;
  }
  else
  {
    clear_has_datestring();
    datestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetTimeResponse

// required string timechanged = 1;
bool SetTimeResponse::has_timechanged() const
{
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetTimeResponse::set_has_timechanged()
{
  _has_bits_[0] |= 0x00000001u;
}
void SetTimeResponse::clear_has_timechanged()
{
  _has_bits_[0] &= ~0x00000001u;
}
void SetTimeResponse::clear_timechanged()
{
  if (timechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    timechanged_->clear();
  }
  clear_has_timechanged();
}
const ::std::string& SetTimeResponse::timechanged() const
{
  return *timechanged_;
}
void SetTimeResponse::set_timechanged(const ::std::string& value)
{
  set_has_timechanged();
  if (timechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    timechanged_ = new ::std::string;
  }
  timechanged_->assign(value);
}
void SetTimeResponse::set_timechanged(const char* value)
{
  set_has_timechanged();
  if (timechanged_ == &::google::protobuf::internal::kEmptyString)
{
    timechanged_ = new ::std::string;
  }
  timechanged_->assign(value);
}
void SetTimeResponse::set_timechanged(const char* value, size_t size)
{
  set_has_timechanged();
  if (timechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    timechanged_ = new ::std::string;
  }
  timechanged_->assign(reinterpret_cast<const char*>(value), size);
}
::std::string* SetTimeResponse::mutable_timechanged()
{
  set_has_timechanged();
  if (timechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    timechanged_ = new ::std::string;
  }
  return timechanged_;
}
::std::string* SetTimeResponse::release_timechanged()
{
  clear_has_timechanged();
  if (timechanged_ == &::google::protobuf::internal::kEmptyString)
  {
    return NULL;
  }
  else
  {
    ::std::string* temp = timechanged_;
    timechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
void SetTimeResponse::set_allocated_timechanged(::std::string* timechanged)
{
  if (timechanged_ != &::google::protobuf::internal::kEmptyString)
  {
    delete timechanged_;
  }
  if (timechanged)
  {
    set_has_timechanged();
    timechanged_ = timechanged;
  }
  else
  {
    clear_has_timechanged();
    timechanged_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SetTimeRequest

// required string timestring = 1;
bool SetTimeRequest::has_timestring() const
{
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetTimeRequest::set_has_timestring()
{
  _has_bits_[0] |= 0x00000001u;
}
void SetTimeRequest::clear_has_timestring()
{
  _has_bits_[0] &= ~0x00000001u;
}
void SetTimeRequest::clear_timestring()
{
  if (timestring_ != &::google::protobuf::internal::kEmptyString)
  {
    timestring_->clear();
  }
  clear_has_timestring();
}
const ::std::string& SetTimeRequest::timestring() const
{
  return *timestring_;
}
void SetTimeRequest::set_timestring(const ::std::string& value)
{
  set_has_timestring();
  if (timestring_ == &::google::protobuf::internal::kEmptyString)
  {
    timestring_ = new ::std::string;
  }
  timestring_->assign(value);
}
void SetTimeRequest::set_timestring(const char* value)
{
  set_has_timestring();
  if (timestring_ == &::google::protobuf::internal::kEmptyString)
{
    timestring_ = new ::std::string;
  }
  timestring_->assign(value);
}
void SetTimeRequest::set_timestring(const char* value, size_t size)
{
  set_has_timestring();
  if (timestring_ == &::google::protobuf::internal::kEmptyString)
  {
    timestring_ = new ::std::string;
  }
  timestring_->assign(reinterpret_cast<const char*>(value), size);
}
::std::string* SetTimeRequest::mutable_timestring()
{
  set_has_timestring();
  if (timestring_ == &::google::protobuf::internal::kEmptyString)
  {
    timestring_ = new ::std::string;
  }
  return timestring_;
}
::std::string* SetTimeRequest::release_timestring()
{
  clear_has_timestring();
  if (timestring_ == &::google::protobuf::internal::kEmptyString)
  {
    return NULL;
  }
  else
  {
    ::std::string* temp = timestring_;
    timestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
void SetTimeRequest::set_allocated_timestring(::std::string* timestring)
{
  if (timestring_ != &::google::protobuf::internal::kEmptyString)
  {
    delete timestring_;
  }
  if (timestring)
  {
    set_has_timestring();
    timestring_ = timestring;
  }
  else
  {
    clear_has_timestring();
    timestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TestResponse

// -------------------------------------------------------------------

// TestRequest


// @@protoc_insertion_point(namespace_scope)
// ####GenerateNamespaceClosers

}  // namespace dateAndTime
}  // namespace ingenico

// @@protoc_insertion_point(global_scope)
